import tensorflow as tf

def vgg_layers(layer_names):
    """
    Creates a vgg model that returns a list of intermediate output values.

    Args:
        layer_names (list of strings): Names of VGG19 layers, which we want to have on output

    Returns: tf.keras.Model
        Model, which output is output values of layer_names
    """
    vgg = tf.keras.applications.VGG19(include_top=False, weights='imagenet')
    vgg.trainable = False

    outputs = [vgg.get_layer(name).output for name in layer_names]

    model = tf.keras.Model([vgg.input], outputs)

    return model


def gram_matrix(input_tensor):
    """
    Args:
        input_tensor (tf.Tensor): Tensor for which we calculate gram_matrix

    Returns: tf.Tensor
        Gram matrix for input_tensor
    """
    result = tf.linalg.einsum('bijc,bijd->bcd', input_tensor, input_tensor)
    input_shape = tf.shape(input_tensor)
    num_locations = tf.cast(input_shape[1]*input_shape[2] * input_shape[3], tf.float32)

    return result / (num_locations)


class StyleContentModel(tf.keras.models.Model):
    """
        A class for gaining Style and Content representation of image through VGG19

        Attributes:
            vgg (tf.keras.Model): Model, which returns VGG19 output
            style_layers (list of strings): Layers of VGG19 which we consider as style representation
            content_layers (list of strings): Layers of VGG19 which we consider as content representation
            num_style_layers (int): Amount of style layers

    """
    def __init__(self, style_layers, content_layers):
        """
        Initalize Model with style_layers and content_layers
        """
        super(StyleContentModel, self).__init__()
        self.vgg =  vgg_layers(style_layers + content_layers)
        self.style_layers = style_layers
        self.content_layers = content_layers
        self.num_style_layers = len(style_layers)
        self.vgg.trainable = False

    @tf.function
    def call(self, inputs, training=None):
        """
        Performs calculating of style and content representation through VGG19

        Args:
            inputs (tf.Tensor): Input image
            training (boolean): Necessary parameter for using tf 2.0 with eager mode but useless

        Returns (dict):
            Dictionary with 2 keys ('content' and 'style') containing tf.Tensors with appropriate layers (style_layers for style key and content_layers for content key)
        """

        inputs = inputs * 127.5 + tf.constant([3.82, 10.72, 23.56])
        red, green, blue = tf.split(inputs, 3, tf.shape(inputs).shape[0] - 1)
        inputs_bgr = tf.concat([blue, green, red], axis = tf.shape(inputs).shape[0] - 1)

        outputs = self.vgg(inputs_bgr)
        style_outputs, content_outputs = (outputs[:self.num_style_layers],
                                          outputs[self.num_style_layers:])

        style_outputs = [gram_matrix(style_output)
                         for style_output in style_outputs]

        content_dict = {content_name:value
                        for content_name, value
                        in zip(self.content_layers, content_outputs)}

        style_dict = {style_name:value
                      for style_name, value
                      in zip(self.style_layers, style_outputs)}

        return {'content':content_dict, 'style':style_dict}


cross_entropy = tf.losses.BinaryCrossentropy(from_logits = False)

def generator_loss(y_real, y_gen, generated_output, outputs_real, outputs_fake):
    """
    Calculates loss of generator

    Args:
        y_real (tf.Tensor): Real image
        y_gen (tf.Tensor): Image is generated by Generator
        generated_output (tf.Tensor): Probabilites of realness of generated images created by Discriminator
        outputs_real (tf.Tensor or np.array): VGG19 output of real image
        outputs_fake (tf.Tensor or np.array): VGG19 output of fake_image

    Returns: (tf.float32)
        Loss of generator
    """
    style_real = outputs_real['style']
    content_real = outputs_real['content']

    style_fake = outputs_fake['style']
    content_fake = outputs_fake['content']

    style_loss = tf.add_n([tf.reduce_mean(tf.abs(style_real[name]-style_fake[name]))
                           for name in style_layers])
    style_loss /= num_style_layers

    content_loss = tf.add_n([tf.reduce_mean(tf.abs(content_real[name]-content_fake[name]))
                             for name in content_layers])
    content_loss / num_content_layers

    l1_loss = tf.reduce_mean(tf.abs(y_gen - y_real))
    gan_loss = cross_entropy(tf.ones_like(generated_output, dtype= 'float32'), generated_output)

#     width = tf.cast(image_size - tf.reduce_min(tf.reduce_sum(mask, axis = 1)), tf.int32)
#     height = tf.cast(image_size - tf.reduce_min(tf.reduce_sum(mask, axis = 0)), tf.int32)

#     x = tf.reduce_max(tf.argmin(mask, axis = 1, output_type = tf.int32))
#     y = tf.reduce_max(tf.argmin(mask, axis = 0, output_type = tf.int32))

#     mask_loss = tf.reduce_mean(tf.abs(y_real[:, x: x + width, y: y + height, :] - y_gen[:, x: x + width, y: y + height, :]))

    return l1_loss + style_loss + content_loss + 5 * gan_loss # + 2 * mask_loss


def discriminator_loss(real_output, fake_output):
    """

    Calculates loss of discriminator

    Args:
        real_output (tf.Tensor): Probabilites of realness of real image created by Discriminator
        fake_output (tf.Tensor): Probabilites of realness of fake_image created by Discriminator

    Returns: (tf.float32)
        Loss of discriminator
    """
    real_loss = cross_entropy(tf.ones_like(real_output, dtype= 'float32') * np.random.uniform(low = 0.9, high = 1), real_output)
    gen_loss = cross_entropy(tf.zeros_like(fake_output), fake_output)

    return 0.5 * (real_loss + gen_loss)
